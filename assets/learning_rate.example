const alpha = 0.2

//  Other parameters ...

for (let iteration = 0; iteration < 1; iteration++) {
    let outputLayerError = 0

    for (let i = 0; i < inputs.shape[0]; i++) {
        //  Feedforward step ...

        //  Error calculation step ...

        let layer_2_delta = nj.subtract(outputLayer, outputs.slice([i, i + 1]))
        let layer_1_delta = nj.multiply(layer_2_delta.dot(weights_1_2.T), reluDeriv(layer_1))

        weights_1_2 = nj.subtract(weights_1_2, layer_1.T.dot(layer_2_delta).multiply(alpha))
        weights_0_1 = nj.subtract(weights_0_1, layer_0.T.dot(layer_1_delta).multiply(alpha))
    }

    // Logging to console

}